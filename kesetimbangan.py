# -*- coding: utf-8 -*-
"""Kesetimbangan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NtYfmJaC59wdWqSTVbqDZDiWdwK4DQi1
"""



import numpy as np
import matplotlib.pyplot as plt

#Rentang nilai x dan waktu untuk medan vektor
x = np.arange(0, 3, 0.1) # sebagai y
t = np.arange(0, 4, 0.1) # sebagai x
T, X = np.meshgrid(t, x) # untuk membuat papan

# Definisikan sistem
dX = -X**2 + 3 * X - 2
dT = np.ones(dX.shape) # untuk menjadikan satu baris

# plot stream plot
plt.figure(figsize=(10, 6))
plt.streamplot(T, X, dT, dX, color=dX, cmap='coolwarm', linewidth=1)

plt.title("Stream plot of the system")
plt.xlabel("Time (t)")
plt.ylabel("x")
plt.axhline(0, color='gray', linestyle='--')
plt.colorbar(label='dx/dt')
plt.grid(True)
plt.show()

"""suhu kopi"""

# Parameter konstan
k = 0.1 # Konstanta pendinginan
Ta = 25 # suhu lingkungan

 #Definisi sistem persamaan diferensial
def system(T):
  return -k * (T - Ta)

#membuat grid untuk visualisasi
t_vals = np.linspace(0, 50, 20) # rentang waktu
T_vals = np.linspace(0, 50, 20) #rentang suhu
t, T = np.meshgrid(t_vals, T_vals) # perbaikan untuk mesgrid

#menghitung vektor arah
U = np.ones_like(T) #arang horizontal untuk menunjukan perubahan dalam waktu
V = system(T) # arah vertikal mengikuti sistem persamaan diferensial

#plot medan vektor menggunakan streamplot
plt.figure(figsize=(7, 5))
plt.streamplot(t, T, U, V, color='blue')
plt.axhline(Ta, color='red', linestyle='--', label='solusi setimbang (T = Ta)')
plt.xlabel('t (waktu)')
plt.ylabel('T (suhu)')
plt.title('medan vektor untuk persamaan diferensial pendinginan newton')
plt.legend
plt.grid()
plt.show()