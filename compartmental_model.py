# -*- coding: utf-8 -*-
"""Compartmental Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-PUBychBUXdniyy9CXMwYJBX3Q1m1M3i
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Parameter model
beta = 0.2    # laju infeksi
gamma = 1/10 # laju pemulihan (1/gamma = 10 hari)
N = 1000 # total populasi

# Kondisi awal
S0 = N - 1  # Semua individu rentan kecuali 1 yang terinfeksi
I0 = 1      # Individu Yang terinfeksi pada awalnya
R0 = 0      # tidak ada yang sembuh pada awalnya

# Waktu simulasi (dalam hari)
t = np.linspace(0, 160, 160)  # simulasi selama 160 hri

# Model SIR
def sir_model(y, t, N, beta, gamma):
    S, I, R = y
    dSdt = -beta* S * I / N
    dIdt = beta * S *I / N - gamma * I
    dRdt = gamma *I
    return [dSdt, dIdt, dRdt]

# Menyelesaikan sistem persamaan diferensial
y0 = [S0, I0, R0]
solution = odeint(sir_model, y0, t, args=(N, beta, gamma))
S, I, R = solution.T

# Plot hasil simulasi
plt.figure(figsize=(10, 6))
plt.plot(t, S, label= 'Susceptible', color='blue')
plt.plot(t, I, label= 'Infected', color='red')
plt.plot(t, R, label= 'Recovered', color='green')
plt.xlabel('Hari')
plt.ylabel('Jumlah Individu')
plt.title('Simulasi Model SIR')
plt.legend()
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import ipywidgets as widgets           # Memungkingkan untuk membuat tombol tombol
from IPython.display import display    # Memunculkan

# Model SIR
def sir_model (y,t,N,beta,gamma):
    S,I,R = y
    dSdt = -beta * S * I /N
    dIdt = beta * S * I / N - gamma * I
    dRdt = gamma * I
    return [dSdt,dIdt,dRdt]     #Kembalikan nilai fungsi fungsinya

# Fungsi untuk memperbarui grafik
def update_sir(beta, gamma, S0, I0, Tmax):
    N = S0 + I0                       # Total populasi
    R0 = 0                            # Tidak ada yang sembuh pada walnya
    t = np.linspace(0, Tmax, Tmax)    # Waktu simulasi

    # Menyelesaikan sistem persamaan diferensial
    y0 = [S0,I0,R0]
    solution = odeint(sir_model, y0, t, args=(N,beta,gamma))
    S,I,R = solution.T

    # Plot hasil simulasi
    plt.figure(figsize=(10,6))
    plt.plot(t, S, label='Susceptible', color="blue")
    plt.plot(t, I, label='Infected', color="red")
    plt.plot(t, R, label='Recovered', color="green")
    plt.xlabel('Hari')
    plt.ylabel('Jumlah Individu')
    plt.title("Simulasi Model SIR")
    plt.legend()
    plt.grid()
    plt.show()

# Membuat slider interaktif
widgets.interactive(update_sir,
                    beta=widgets.FloatSlider(value=0.2, min=0.0001, max=1, step=0.0001, description='Beta'),
                    gamma=widgets.FloatSlider(value=0.1, min=0.01, max=1, step=0.01, description='Gamma'),
                    S0=widgets.IntSlider(value=997, min=1, max=1000, step=1, description='S0'),
                    I0=widgets.IntSlider(value=3, min=1, max=100, step=1, description='I0'),
                    Tmax=widgets.IntSlider(value=100, min=10, max=200, step=10, description='T max'))